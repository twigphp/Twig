---------------------------------------------------------------------------

by fabpot at 2018-01-30T21:33:22Z

Could you submit this on 1.x instead?

---------------------------------------------------------------------------

by lstrojny at 2018-01-30T21:39:45Z

@fabpot sure

---------------------------------------------------------------------------

by stof at 2018-01-31T08:15:26Z

I'm not sure this makes them deterministic. Is the state reset properly between templates ? Otherwise, it is reproducible only if you compile templates in the same order.

---------------------------------------------------------------------------

by stof at 2018-01-31T10:10:07Z

I have my answer. this is not properly deterministic. Here is what needed to solve it:

- reset the state in `Compiler::compile`
- reset the state in `Parser::parse` near the other state resetting (**not** at the beginning of the method, as it has to save the previous state to reset it)
- use a static name for the profiler visitor. This visitor needs a single variable per compiled method (as blocks and macro nodes are compiled to separate methods). This will avoid the need to manage any state. You just need to make sure there is no conflicts with variable names generated by the parser or the compiler (but using `hash('sha256', __METHOD__)` would be fine then).

---------------------------------------------------------------------------

by lstrojny at 2018-01-31T13:54:04Z

@stof cool, that will indeed make it work across the more narrow use case of initially parsing the templates.

---------------------------------------------------------------------------

by lstrojny at 2018-02-07T14:40:04Z

Ready to be merged from my POV
